Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1588434536821)
+++ .idea/misc.xml	(date 1588434536821)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.gitignore	(date 1588434537023)
+++ .idea/.gitignore	(date 1588434537023)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: off-axis_gain.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -----------------------------------------------------------------------------\r\n# Name:        off-axis_gain\r\n# Purpose:\r\n#\r\n# Author:      -\r\n#\r\n# Created:     15.04.2020\r\n# Copyright:   (c) - 2020\r\n# Licence:     <your licence>\r\n# -----------------------------------------------------------------------------\r\nfrom math import log10, sqrt, pi\r\nfrom tkinter import Tk, E, W, StringVar, IntVar, END\r\nfrom tkinter import ttk\r\n\r\n\r\nclass Root(Tk):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.title('Расчет внеосевого коэффициента усиления антенны')\r\n        #   Frame for input data\r\n        self.frame_inputs = ttk.LabelFrame(self, text='Входные данные:',\r\n                                           labelanchor=\"n\")\r\n        self.frame_inputs.grid(column=0, row=0, padx=5, pady=5)\r\n        #   Button for calling calculations\r\n        self.button_calculate = ttk.Button(self, text='Рассчитать')\r\n        self.button_calculate.grid(column=0, row=1)\r\n        #   Frame for calculated parameters\r\n        self.frame_outputs = ttk.LabelFrame(self,\r\n                                            text='Рассчитанные параметры:',\r\n                                            labelanchor=\"n\")\r\n        self.frame_outputs.grid(column=0, row=2, padx=5, pady=5)\r\n        Rec(self)\r\n\r\n\r\nclass Rec:\r\n    def __init__(self, root):\r\n        self.root = root\r\n        self.input_widgets()\r\n        self.root.button_calculate.bind('<Button-1>', self.set_outputs)\r\n        self.output_widgets()\r\n\r\n    def input_widgets(self):\r\n        #   Label for recommendations combobox\r\n        self.root.label_rec = ttk.Label(self.root.frame_inputs,\r\n                                        text='Рекомендация')\r\n        self.root.label_rec.grid(column=0, row=0, sticky=E, padx=5)\r\n        #   Combobox for recommendations\r\n        self.root.rec = StringVar()\r\n        self.root.combobox_rec = ttk.Combobox(self.root.frame_inputs,\r\n                                              width=20,\r\n                                              textvariable=self.root.rec)\r\n        self.root.combobox_rec['values'] = ('AP30-97', 'AP30B', 'AP7',\r\n                                            'AP8', 'S.465-6', 'S.580-6')\r\n        self.root.combobox_rec.grid(column=1, row=0, sticky=W)\r\n        self.root.combobox_rec.bind(\"<<ComboboxSelected>>\", self.check_rec)\r\n\r\n        #   Register entry check function\r\n        self.vcmd = self.root.register(self.check_entry)\r\n        #   Register eta entry check function\r\n        self.eta_vcmd = self.root.register(self.check_eta_entry)\r\n\r\n        #   Label for off-axis angle entry\r\n        self.root.label_offaxis_angle = ttk.Label(self.root.frame_inputs,\r\n                                                  text=('Внеосевой угол'\r\n                                                        '(\\u03C6), \\u00b0'))\r\n        self.root.label_offaxis_angle.grid(column=0, row=1, sticky=E, padx=5)\r\n        #   Entry for off-axis angle\r\n        self.root.offaxis_angle = StringVar()\r\n        self.root.entry_offaxis_angle = ttk.Entry(self.root.frame_inputs,\r\n                                                  width=10,\r\n                                                  textvariable=self.root.\r\n                                                  offaxis_angle,\r\n                                                  validate='key',\r\n                                                  validatecommand=(self.vcmd,\r\n                                                                   '%P'))\r\n        self.root.entry_offaxis_angle.grid(column=1, row=1, sticky=W)\r\n        self.root.entry_offaxis_angle.insert(0, '0')\r\n\r\n        #   Label for frequency entry\r\n        self.root.label_frequency = ttk.Label(self.root.frame_inputs,\r\n                                              text='Частота (f), ГГц')\r\n        self.root.label_frequency.grid(column=0, row=2, sticky=E, padx=5)\r\n        #   Entry for frequency\r\n        self.root.frequency = StringVar()\r\n        self.root.entry_frequency = ttk.Entry(self.root.frame_inputs,\r\n                                              width=10,\r\n                                              textvariable=self.root.frequency,\r\n                                              validate='all',\r\n                                              validatecommand=(self.vcmd,\r\n                                                               '%P'))\r\n        self.root.entry_frequency.grid(column=1, row=2, sticky=W)\r\n        self.root.entry_frequency.insert(0, '14')\r\n\r\n        #   Label for diameter entry\r\n        self.root.label_diameter = ttk.Label(self.root.frame_inputs,\r\n                                             text='Диаметр антенны (D), м')\r\n        self.root.label_diameter.grid(column=0, row=3, sticky=E, padx=5)\r\n        #   Entry for diameter\r\n        self.root.diameter = StringVar()\r\n        self.root.entry_diameter = ttk.Entry(self.root.frame_inputs,\r\n                                             width=10,\r\n                                             textvariable=self.root.diameter,\r\n                                             validate='all',\r\n                                             validatecommand=(self.vcmd, '%P'))\r\n        self.root.entry_diameter.grid(column=1, row=3, sticky=W)\r\n        self.root.entry_diameter.insert(0, '2')\r\n\r\n    def output_widgets(self):\r\n        #   Frame for main outputs\r\n        self.root.frame_main_out = ttk.Frame(self.root.frame_outputs)\r\n        self.root.frame_main_out.grid(column=0, row=0)\r\n\r\n        #   Label for co-polarisation off-axis gain entry\r\n        self.root.label_offaxis_gain = ttk.Label(self.root.frame_main_out,\r\n                                                 text=('Ко-пол. внеосевой коэф'\r\n                                                       'фициент усиления (G), '\r\n                                                       'дБ'))\r\n        self.root.label_offaxis_gain.grid(column=0, row=0, sticky=E, padx=5,\r\n                                          pady=(0, 10))\r\n        #   Entry for co-polarisation off-axis gain\r\n        self.root.entry_offaxis_gain = ttk.Entry(self.root.frame_main_out,\r\n                                                 width=10)\r\n        self.root.entry_offaxis_gain.grid(column=1, row=0, sticky=W,\r\n                                          pady=(0, 10))\r\n\r\n        #   Frame for additional outputs\r\n        self.root.frame_add_out = ttk.Frame(self.root.frame_outputs)\r\n        self.root.frame_add_out.grid(column=0, row=1)\r\n\r\n        #   Label for wavelength entry\r\n        self.root.label_wavelength = ttk.Label(self.root.frame_add_out,\r\n                                               text=('Длина волны (\\u03BB), '\r\n                                                     'мм'))\r\n        self.root.label_wavelength.grid(column=0, row=0, sticky=E,\r\n                                        padx=5)\r\n        #   Entry for wavelength\r\n        self.root.entry_wavelength = ttk.Entry(self.root.frame_add_out,\r\n                                               width=10)\r\n        self.root.entry_wavelength.grid(column=1, row=0, sticky=W)\r\n\r\n        #   Label for D/λ entry\r\n        self.root.label_dw = ttk.Label(self.root.frame_add_out,\r\n                                       text='Отношение D/\\u03BB')\r\n        self.root.label_dw.grid(column=0, row=1, sticky=E, padx=5)\r\n        #   Entry for D/λ\r\n        self.root.entry_dw = ttk.Entry(self.root.frame_add_out, width=10)\r\n        self.root.entry_dw.grid(column=1, row=1, sticky=W)\r\n\r\n    def check_rec(self, event):\r\n        self.clean_previous()\r\n        rec = self.root.rec.get()\r\n        offaxis_angle = self.root.offaxis_angle.get()\r\n        frequency = self.root.frequency.get()\r\n        diameter = self.root.diameter.get()\r\n        if rec == 'AP8':\r\n            AP8(self.root)\r\n        elif rec == 'AP7':\r\n            AP7(self.root)\r\n        elif rec == 'AP30-97':\r\n            AP30_97(self.root)\r\n            self.root.frequency.set(12.1)\r\n            self.root.diameter.set(0.6)\r\n            self.root.eta.set(0.65)\r\n        elif rec == 'AP30B':\r\n            AP30B(self.root)\r\n            self.root.frequency.set(13)\r\n            self.root.diameter.set(2.7)\r\n            self.root.eta.set(0.7)\r\n        elif rec == 'S.465-6':\r\n            S465(self.root)\r\n        elif rec == 'S.580-6':\r\n            S580(self.root)\r\n        self.root.rec.set(rec)\r\n        self.root.offaxis_angle.set(offaxis_angle)\r\n        if rec not in ['AP30-97', 'AP30B']:\r\n            self.root.frequency.set(frequency)\r\n            self.root.diameter.set(diameter)\r\n\r\n    def clean_previous(self):\r\n        for widget in self.root.frame_inputs.grid_slaves():\r\n            if int(widget.grid_info()[\"row\"]) > 3:\r\n                widget.destroy()\r\n        for widget in self.root.frame_main_out.grid_slaves():\r\n            if int(widget.grid_info()[\"row\"]) > 0:\r\n                widget.destroy()\r\n        for widget in self.root.frame_main_out.grid_slaves(column=1):\r\n            widget.delete(0, END)\r\n        for widget in self.root.frame_add_out.grid_slaves():\r\n            if int(widget.grid_info()[\"row\"]) > 1:\r\n                widget.destroy()\r\n        for widget in self.root.frame_add_out.grid_slaves(column=1):\r\n            widget.delete(0, END)\r\n\r\n    def check_entry(self, P):\r\n        try:\r\n            if P == \"\" or float(P) >= 0:\r\n                return True\r\n            return False\r\n        except ValueError:\r\n            return False\r\n\r\n    def check_eta_entry(self, P):\r\n        try:\r\n            if P == \"0.\" or 0.5 <= float(P) <= 0.7:\r\n                return True\r\n            return False\r\n        except ValueError:\r\n            return False\r\n\r\n    def get_inputs(self):\r\n        self.offaxis_angle = float(self.root.offaxis_angle.get())\r\n        self.frequency = float(self.root.frequency.get())\r\n        self.diameter = float(self.root.diameter.get())\r\n        self.inputs = [self.offaxis_angle, self.frequency, self.diameter]\r\n\r\n    def set_outputs(self, event):\r\n        self.get_inputs()\r\n        self.outputs = self.Equations(self.inputs).outputs\r\n        #   Set off-axis gain\r\n        self.root.entry_offaxis_gain.delete(0, END)\r\n        self.root.entry_offaxis_gain.insert(0, self.outputs[0])\r\n        #   Set wavelength\r\n        self.root.entry_wavelength.delete(0, END)\r\n        self.root.entry_wavelength.insert(0, self.outputs[1])\r\n        #   Set D/λ\r\n        self.root.entry_dw.delete(0, END)\r\n        self.root.entry_dw.insert(0, self.outputs[2])\r\n\r\n    class Equations:\r\n\r\n        def __init__(self, inputs):\r\n            self.s_l = 299792458  # speed of light, m/s\r\n            # off-axis angle (°), frequency (GHz), antenna diameter (m)\r\n            self.phi, self.f, self.d = inputs[:3]\r\n            self.g = ''\r\n            self.add_params()\r\n            self.offaxis_gain()\r\n            self.outputs = [self.gr, self.wr, self.dwr]\r\n\r\n        #   Additional parameter equations\r\n        def add_params(self):\r\n            # длина волны, м\r\n            self.w = self.s_l / (self.f * 10 ** 9) if self.f > 0 else 'f = 0 !'\r\n            # длина волны, мм\r\n            self.wr = (round(10 ** 3 * self.w, 2) if type(self.w) == float\r\n                       else self.w)\r\n            # отношение диаметра антенны к длине волны\r\n            if self.d > 0 and self.f > 0:\r\n                self.dw = self.d / self.w\r\n            elif self.d == 0:\r\n                self.dw = 'd = 0 !'\r\n            else:\r\n                self.dw = 'f = 0 !'\r\n            self.dwr = round(self.dw, 2) if type(self.dw) == float else self.dw\r\n\r\n        #   Off-axis gain equations\r\n        def offaxis_gain(self):\r\n            self.gr = round(self.g, 2) if type(self.g) == float else self.g\r\n\r\n\r\nclass AP8(Rec):\r\n    def output_widgets(self):\r\n        super().output_widgets()\r\n\r\n        #   Label for Gmax entry\r\n        self.root.label_gmax = ttk.Label(self.root.frame_add_out,\r\n                                         text=('Макс. коэффициент усиления '\r\n                                               '(Gmax), дБ'))\r\n        self.root.label_gmax.grid(column=0, row=2, sticky=E, padx=5)\r\n        #   Entry for Gmax\r\n        self.root.entry_gmax = ttk.Entry(self.root.frame_add_out, width=10)\r\n        self.root.entry_gmax.grid(column=1, row=2, sticky=W)\r\n\r\n        #   Label for G1 entry\r\n        self.root.label_g1 = ttk.Label(self.root.frame_add_out,\r\n                                       text=('Усиление 1-й бок. лепестка (G1),'\r\n                                             ' дБ'))\r\n        self.root.label_g1.grid(column=0, row=3, sticky=E, padx=5)\r\n        #   Entry for G1\r\n        self.root.entry_g1 = ttk.Entry(self.root.frame_add_out, width=10)\r\n        self.root.entry_g1.grid(column=1, row=3, sticky=W)\r\n\r\n        #   Label for φm\r\n        self.root.label_phim = ttk.Label(self.root.frame_add_out,\r\n                                         text=('Внеосевой угол начала G1 '\r\n                                               '(\\u03C6m), \\u00b0'))\r\n        self.root.label_phim.grid(column=0, row=4, sticky=E, padx=5)\r\n        #   Entry for φm\r\n        self.root.entry_phim = ttk.Entry(self.root.frame_add_out, width=10)\r\n        self.root.entry_phim.grid(column=1, row=4, sticky=W)\r\n\r\n        #   Label for φr\r\n        self.root.label_phir = ttk.Label(self.root.frame_add_out,\r\n                                         text=('Внеосевой угол конца G1 '\r\n                                               '(\\u03C6r), \\u00b0'))\r\n        self.root.label_phir.grid(column=0, row=5, sticky=E, padx=5)\r\n        #   Entry for φr\r\n        self.root.entry_phir = ttk.Entry(self.root.frame_add_out, width=10)\r\n        self.root.entry_phir.grid(column=1, row=5, sticky=W)\r\n\r\n        #   Label for φb\r\n        self.root.label_phib = ttk.Label(self.root.frame_add_out,\r\n                                         text='Внеосевой угол \\u03C6b, \\u00b0')\r\n        self.root.label_phib.grid(column=0, row=6, sticky=E, padx=5)\r\n        #   Entry for φb\r\n        self.root.entry_phib = ttk.Entry(self.root.frame_add_out, width=10)\r\n        self.root.entry_phib.grid(column=1, row=6, sticky=W)\r\n\r\n    def set_outputs(self, event):\r\n        super().set_outputs(event)\r\n        #   Set Gmax\r\n        self.root.entry_gmax.delete(0, END)\r\n        self.root.entry_gmax.insert(0, self.outputs[3])\r\n        #   Set G1\r\n        self.root.entry_g1.delete(0, END)\r\n        self.root.entry_g1.insert(0, self.outputs[4])\r\n        #   Set φm\r\n        self.root.entry_phim.delete(0, END)\r\n        self.root.entry_phim.insert(0, self.outputs[5])\r\n        #   Set φr\r\n        self.root.entry_phir.delete(0, END)\r\n        self.root.entry_phir.insert(0, self.outputs[6])\r\n        #   Set φb\r\n        self.root.entry_phib.delete(0, END)\r\n        self.root.entry_phib.insert(0, self.outputs[7])\r\n\r\n    class Equations(Rec.Equations):\r\n        def __init__(self, inputs):\r\n            super().__init__(inputs)\r\n            self.outputs += [self.gmaxr, self.g1r, self.phi_mr, self.phi_rr,\r\n                             self.phi_br]\r\n\r\n        def add_params(self):\r\n            super().add_params()\r\n            self.gmax = 20 * log10(self.dw) + 7.7\r\n            self.gmaxr = round(self.gmax, 2)\r\n            self.g1 = 2 + 15 * log10(self.dw)\r\n            self.g1r = round(self.g1, 2)\r\n            self.phi_m = (20 * self.w / self.d) * sqrt(self.gmax - self.g1)\r\n            self.phi_mr = round(self.phi_m, 2)\r\n            if self.dw >= 100:\r\n                self.phi_r = 15.85 * self.dw ** (-0.6)\r\n            else:\r\n                self.phi_r = 100 * self.w / self.d\r\n            self.phi_rr = round(self.phi_r, 2)\r\n            self.phi_br = self.phi_b = 48\r\n\r\n        def offaxis_gain(self):\r\n            if self.phi == 0:\r\n                self.g = self.gmax\r\n            elif (0 < self.phi < self.phi_m):\r\n                self.g = self.gmax - 2.5 * 10**(-3) * (self.dw * self.phi)**2\r\n            elif (self.phi_m <= self.phi < self.phi_r):\r\n                self.g = self.g1\r\n            elif (self.phi > 180):\r\n                self.g = '\\u03C6 > 180 !'\r\n            else:\r\n                if self.dw >= 100:\r\n                    if (self.phi_r <= self.phi < self.phi_b):\r\n                        self.g = 32 - 25 * log10(self.phi)\r\n                    else:\r\n                        self.g = - 10\r\n                else:\r\n                    if (self.phi_r <= self.phi < self.phi_b):\r\n                        self.g = (52 - 10*log10(self.dw) - 25*log10(self.phi))\r\n                    else:\r\n                        self.g = 10 - 10 * log10(self.dw)\r\n            super().offaxis_gain()\r\n\r\n\r\nclass AP7(AP8):\r\n\r\n    class Equations(AP8.Equations):\r\n        def add_params(self):\r\n            super().add_params()\r\n            if self.dw < 35:\r\n                self.gmaxr = self.g1r = self.phi_mr = 'D/\\u03BB < 35 !'\r\n                self.phi_rr = self.phi_br = 'D/\\u03BB < 35 !'\r\n            else:\r\n                if self.dw >= 100:\r\n                    self.g1 = -1 + 15 * log10(self.dw)\r\n                else:\r\n                    self.g1 = -21 + 25 * log10(self.dw)\r\n                self.g1r = round(self.g1, 2)\r\n                self.phi_m = 20 * (self.w / self.d) * sqrt(self.gmax - self.g1)\r\n                self.phi_mr = round(self.phi_m, 2)\r\n                self.phi_br = self.phi_b = 36\r\n\r\n        def offaxis_gain(self):\r\n            if self.dw < 35:\r\n                self.g = 'D/\\u03BB < 35 !'\r\n            else:\r\n                super().offaxis_gain()\r\n            if (self.phi_r <= self.phi < self.phi_b):\r\n                self.g = 29 - 25 * log10(self.phi)\r\n            elif (self.phi_b <= self.phi <= 180):\r\n                self.g = - 10\r\n            super(AP8.Equations, self).offaxis_gain()\r\n\r\n\r\nclass AP30_97(AP8):\r\n    def input_widgets(self):\r\n        super().input_widgets()\r\n\r\n        #   Label for eta entry\r\n        self.root.label_eta = ttk.Label(self.root.frame_inputs,\r\n                                        text=('Коэфф. использ. поверхн. '\r\n                                              'антенны (\\u03B7)'))\r\n        self.root.label_eta.grid(column=0, row=4, sticky=E, padx=5)\r\n        #   Entry for eta\r\n        self.root.eta = StringVar()\r\n        self.root.entry_eta = ttk.Entry(self.root.frame_inputs, width=10,\r\n                                        textvariable=self.root.eta,\r\n                                        validate='key',\r\n                                        validatecommand=(self.eta_vcmd, '%P'))\r\n        self.root.entry_eta.grid(column=1, row=4, sticky=W)\r\n        self.root.entry_eta.insert(0, '0.65')\r\n\r\n    def output_widgets(self):\r\n        super().output_widgets()\r\n\r\n        #   Label for X-polarisation off-axis gain entry\r\n        self.root.label_offaxis_gain_x = ttk.Label(self.root.frame_main_out,\r\n                                                   text=('Кросс-пол. внеосевой'\r\n                                                         ' коэффициент усилени'\r\n                                                         'я (Gx), дБ'))\r\n        self.root.label_offaxis_gain_x.grid(column=0, row=1, sticky=E,\r\n                                            padx=5, pady=(0, 10))\r\n        #   Entry for X-polarisation off-axis gain\r\n        self.root.entry_offaxis_gain_x = ttk.Entry(self.root.frame_main_out,\r\n                                                   width=10)\r\n        self.root.entry_offaxis_gain_x.grid(column=1, row=1, sticky=W,\r\n                                            pady=(0, 10))\r\n\r\n        #   Label for 0.25*φ0\r\n        self.root.label_z25phi0 = ttk.Label(self.root.frame_add_out,\r\n                                            text=('Внеосевой угол 0.25*\\u03C60'\r\n                                                  ', \\u00b0'))\r\n        self.root.label_z25phi0.grid(column=0, row=7, sticky=E, padx=5)\r\n        #   Entry for 0.25*φ0\r\n        self.root.entry_z25phi0 = ttk.Entry(self.root.frame_add_out, width=10)\r\n        self.root.entry_z25phi0.grid(column=1, row=7, sticky=W)\r\n\r\n        #   Label for 0.44*φ0\r\n        self.root.label_z44phi0 = ttk.Label(self.root.frame_add_out,\r\n                                            text=('Внеосевой угол 0.44*\\u03C60'\r\n                                                  ', \\u00b0'))\r\n        self.root.label_z44phi0.grid(column=0, row=8, sticky=E, padx=5)\r\n        #   Entry for 0.44*φ0\r\n        self.root.entry_z44phi0 = ttk.Entry(self.root.frame_add_out, width=10)\r\n        self.root.entry_z44phi0.grid(column=1, row=8, sticky=W)\r\n\r\n        #   Label for φ0\r\n        self.root.label_phi0 = ttk.Label(self.root.frame_add_out,\r\n                                         text=('Внеосевой угол \\u03C60, '\r\n                                               '\\u00b0'))\r\n        self.root.label_phi0.grid(column=0, row=9, sticky=E, padx=5)\r\n        #   Entry for φ0\r\n        self.root.entry_phi0 = ttk.Entry(self.root.frame_add_out, width=10)\r\n        self.root.entry_phi0.grid(column=1, row=9, sticky=W)\r\n\r\n        #   Label for φ1\r\n        self.root.label_phi1 = ttk.Label(self.root.frame_add_out,\r\n                                         text=('Внеосевой угол \\u03C61, '\r\n                                               '\\u00b0'))\r\n        self.root.label_phi1.grid(column=0, row=10, sticky=E, padx=5)\r\n        #   Entry for φ1\r\n        self.root.entry_phi1 = ttk.Entry(self.root.frame_add_out, width=10)\r\n        self.root.entry_phi1.grid(column=1, row=10, sticky=W)\r\n\r\n        #   Label for φ2\r\n        self.root.label_phi2 = ttk.Label(self.root.frame_add_out,\r\n                                         text=('Внеосевой угол \\u03C62, '\r\n                                               '\\u00b0'))\r\n        self.root.label_phi2.grid(column=0, row=11, sticky=E, padx=5)\r\n        #   Entry for φ2\r\n        self.root.entry_phi2 = ttk.Entry(self.root.frame_add_out, width=10)\r\n        self.root.entry_phi2.grid(column=1, row=11, sticky=W)\r\n\r\n        #   Label for S\r\n        self.root.label_s = ttk.Label(self.root.frame_add_out,\r\n                                      text='Коэффициент C, дБ')\r\n        self.root.label_s.grid(column=0, row=12, sticky=E, padx=5)\r\n        #   Entry for S\r\n        self.root.entry_s = ttk.Entry(self.root.frame_add_out, width=10)\r\n        self.root.entry_s.grid(column=1, row=12, sticky=W)\r\n\r\n    def get_inputs(self):\r\n        super().get_inputs()\r\n        self.eta = float(self.root.eta.get())\r\n        self.inputs += [self.eta]\r\n\r\n    def set_outputs(self, event):\r\n        super().set_outputs(event)\r\n        #   Set Gx\r\n        self.root.entry_offaxis_gain_x.delete(0, END)\r\n        self.root.entry_offaxis_gain_x.insert(0, self.outputs[8])\r\n        #   Set 0.25*φ0\r\n        self.root.entry_z25phi0.delete(0, END)\r\n        self.root.entry_z25phi0.insert(0, self.outputs[9])\r\n        #   Set 0.44*φ0\r\n        self.root.entry_z44phi0.delete(0, END)\r\n        self.root.entry_z44phi0.insert(0, self.outputs[10])\r\n        #   Set φ0\r\n        self.root.entry_phi0.delete(0, END)\r\n        self.root.entry_phi0.insert(0, self.outputs[11])\r\n        #   Set φ1\r\n        self.root.entry_phi1.delete(0, END)\r\n        self.root.entry_phi1.insert(0, self.outputs[12])\r\n        #   Set φ2\r\n        self.root.entry_phi2.delete(0, END)\r\n        self.root.entry_phi2.insert(0, self.outputs[13])\r\n        #   Set S\r\n        self.root.entry_s.delete(0, END)\r\n        self.root.entry_s.insert(0, self.outputs[14])\r\n\r\n    class Equations(AP8.Equations):\r\n        def __init__(self, inputs):\r\n            self.eta = inputs[3]\r\n            super().__init__(inputs)\r\n            self.outputs += [self.gxr, self.z25phi_0r, self.z44phi_0r,\r\n                             self.phi_0r, self.phi_1r, self.phi_2r, self.cr]\r\n\r\n        def add_params(self):\r\n            super().add_params()\r\n            self.gmax = 10 * log10(self.eta * (pi*self.dw) ** 2)\r\n            self.gmaxr = round(self.gmax, 2)\r\n            self.phi_r = 95 * self.w / self.d\r\n            self.phi_rr = round(self.phi_r, 2)\r\n            self.g1 = 29 - 25 * log10(self.phi_r)\r\n            self.g1r = round(self.g1, 2)\r\n            self.phi_m = (self.w / self.d) * sqrt((self.gmax - self.g1)/0.0025)\r\n            self.phi_mr = round(self.phi_m, 2)\r\n            self.phi_b = 10 ** (34 / 25)\r\n            self.phi_br = round(self.phi_b, 2)\r\n            self.phi_0 = (2 * self.w / self.d) * sqrt(3 / 0.0025)\r\n            self.phi_0r = round(self.phi_0, 2)\r\n            self.z25phi_0 = 0.25 * self.phi_0\r\n            self.z25phi_0r = round(self.z25phi_0, 2)\r\n            self.z44phi_0 = 0.44 * self.phi_0\r\n            self.z44phi_0r = round(self.z44phi_0, 2)\r\n            self.phi_1 = (self.phi_0 / 2) * sqrt(10.1875)\r\n            self.phi_1r = round(self.phi_1, 2)\r\n            self.phi_2 = 10 ** (26 / 25)\r\n            self.phi_2r = round(self.phi_2, 2)\r\n            self.c = 21 - 25 * log10(self.phi_1) - (self.gmax - 17)\r\n            self.cr = round(self.c, 2)\r\n\r\n        def offaxis_gain(self):\r\n            super().offaxis_gain()\r\n            # Co-polar. off-axis gain\r\n            if (self.phi_r <= self.phi < self.phi_b):\r\n                self.g = 29 - 25 * log10(self.phi)\r\n            elif (self.phi_b <= self.phi < 70):\r\n                self.g = - 5\r\n            elif (70 <= self.phi <= 180):\r\n                self.g = 0\r\n            super(AP8.Equations, self).offaxis_gain()\r\n            # Cross-polar. off-axis gain\r\n            if (0 <= self.phi < self.z25phi_0):\r\n                self.gx = self.gmax - 25\r\n            elif (self.z25phi_0 <= self.phi < self.z44phi_0):\r\n                self.gx = self.gmax - 25 + 8 * ((self.phi - self.z25phi_0)\r\n                                                / (0.19 * self.phi_0))\r\n            elif (self.z44phi_0 <= self.phi < self.phi_0):\r\n                self.gx = self.gmax - 17\r\n            elif (self.phi_0 <= self.phi < self.phi_1):\r\n                self.gx = self.gmax - 17 + self.c * ((self.phi - self.phi_0)\r\n                                                     / (self.phi_1\r\n                                                     - self.phi_0))\r\n            elif (self.phi_1 <= self.phi < self.phi_2):\r\n                self.gx = 21 - 25 * log10(self.phi)\r\n            elif (self.phi_2 <= self.phi < 70):\r\n                self.gx = - 5\r\n            elif (70 <= self.phi <= 180):\r\n                self.gx = 0\r\n            else:\r\n                self.gx = '\\u03C6 > 180 !'\r\n            self.gxr = round(self.gx, 2) if type(self.gx) == float else self.gx\r\n\r\n\r\nclass AP30B(AP30_97):\r\n    def output_widgets(self):\r\n        AP8.output_widgets(self)\r\n        self.root.label_phir.destroy()\r\n        self.root.entry_phir.destroy()\r\n        self.root.label_phib.destroy()\r\n        self.root.entry_phib.destroy()\r\n\r\n    def set_outputs(self, event):\r\n        Rec.set_outputs(self, event)\r\n        #   Set Gmax\r\n        self.root.entry_gmax.delete(0, END)\r\n        self.root.entry_gmax.insert(0, self.outputs[3])\r\n        #   Set G1\r\n        self.root.entry_g1.delete(0, END)\r\n        self.root.entry_g1.insert(0, self.outputs[4])\r\n        #   Set φm\r\n        self.root.entry_phim.delete(0, END)\r\n        self.root.entry_phim.insert(0, self.outputs[5])\r\n\r\n    class Equations(AP30_97.Equations):\r\n        def __init__(self, inputs):\r\n            self.eta = inputs[3]\r\n            Rec.Equations.__init__(self, inputs)\r\n            self.outputs += [self.gmaxr, self.g1r, self.phi_mr]\r\n\r\n        def add_params(self):\r\n            super().add_params()\r\n            self.g1 = - 1 + 15 * log10(self.dw)\r\n            self.g1r = round(self.g1, 2)\r\n            self.phi_m = (20 * self.w / self.d) * sqrt(self.gmax - self.g1)\r\n            self.phi_mr = round(self.phi_m, 2)\r\n\r\n        def offaxis_gain(self):\r\n            super().offaxis_gain()\r\n            if (self.phi_m <= self.phi <= 19.95):\r\n                self.g = min(self.g1, 29 - 25 * log10(self.phi))\r\n            elif (19.95 < self.phi <= 180):\r\n                self.g = max(min(- 3.5, 32 - 25 * log10(self.phi)), -10)\r\n            self.gr = round(self.g, 2) if type(self.g) == float else self.g\r\n\r\n\r\nclass S465(Rec):\r\n    def input_widgets(self):\r\n        super().input_widgets()\r\n\r\n        self.root.label_date = ttk.Label(self.root.frame_inputs,\r\n                                         text='Дата заявления сети: ')\r\n        self.root.label_date.grid(column=0, row=4, sticky=E, padx=5)\r\n\r\n        self.root.date_frame = ttk.Frame(self.root.frame_inputs)\r\n        self.root.date_frame.grid(column=1, row=4)\r\n\r\n        self.root.after_before = IntVar()\r\n        self.root.radio_after = ttk.Radiobutton(self.root.date_frame,\r\n                                                text='После 1993 г.',\r\n                                                value=1,\r\n                                                variable=self.root.\r\n                                                after_before)\r\n        self.root.radio_after.grid(column=0, row=0)\r\n        self.root.radio_after.invoke()\r\n\r\n        self.root.radio_before = ttk.Radiobutton(self.root.date_frame,\r\n                                                 text='До 1993 г.', value=0,\r\n                                                 variable=self.root.\r\n                                                 after_before)\r\n        self.root.radio_before.grid(column=1, row=0)\r\n\r\n        self.root.label_tx_rx = ttk.Label(self.root.frame_inputs,\r\n                                          text='Направление излучения')\r\n        self.root.label_tx_rx.grid(column=0, row=5, sticky=E, padx=5)\r\n\r\n        self.root.frame_tx_rx = ttk.Frame(self.root.frame_inputs)\r\n        self.root.frame_tx_rx.grid(column=1, row=5)\r\n\r\n        self.root.tx_rx = IntVar()\r\n        self.root.radio_tx = ttk.Radiobutton(self.root.frame_tx_rx,\r\n                                             text='Передача', value=1,\r\n                                             variable=self.root.tx_rx)\r\n        self.root.radio_tx.grid(column=0, row=0)\r\n        self.root.radio_tx.invoke()\r\n\r\n        self.root.radio_rx = ttk.Radiobutton(self.root.frame_tx_rx,\r\n                                             text='Прием', value=0,\r\n                                             variable=self.root.tx_rx)\r\n        self.root.radio_rx.grid(column=1, row=0)\r\n\r\n    def output_widgets(self):\r\n        self.root.label_phimin = ttk.Label(self.root.frame_add_out,\r\n                                           text=('Минимальный внеосевой '\r\n                                                 'угол (\\u03C6min), \\u00b0'))\r\n        self.root.label_phimin.grid(column=0, row=2, sticky=E, padx=5)\r\n\r\n        self.root.entry_phimin = ttk.Entry(self.root.frame_add_out, width=10)\r\n        self.root.entry_phimin.grid(column=1, row=2, sticky=W)\r\n\r\n    def get_inputs(self):\r\n        super().get_inputs()\r\n        self.after_before = self.root.after_before.get()\r\n        self.tx_rx = self.root.tx_rx.get()\r\n        self.inputs += [self.after_before, self.tx_rx]\r\n\r\n    def set_outputs(self, event):\r\n        super().set_outputs(event)\r\n        #   Set φmin\r\n        self.root.entry_phimin.delete(0, END)\r\n        self.root.entry_phimin.insert(0, self.outputs[3])\r\n\r\n    class Equations(Rec.Equations):\r\n        def __init__(self, inputs):\r\n            self.ab = inputs[3]\r\n            # ab = True, если земная станция принадлежит сети,\r\n            # координируемой после 1993 г.\r\n            self.tr = inputs[4]\r\n        # tr = True, если направление излучения - передача\r\n            super().__init__(inputs)\r\n            self.outputs += [self.phi_minr]\r\n\r\n        def add_params(self):\r\n            super().add_params()\r\n\r\n            if (2 <= self.f <= 31):\r\n                if (self.ab or self.dw > 100):\r\n                    if (self.tr or self.dw >= 33.3):\r\n                        if self.dw >= 50:\r\n                            self.phi_min = max(1, 100 * self.w / self.d)\r\n                        # минимальный внеосевой угол, градусов\r\n                        else:\r\n                            self.phi_min = max(2, 114 * (self.dw) ** (- 1.09))\r\n                    else:\r\n                        self.phi_min = 2.5\r\n                else:\r\n                    self.phi_min = 100 * self.w / self.d\r\n            elif (self.f < 2):\r\n                self.phi_min = 'f < 2 ГГц !'\r\n            else:\r\n                self.phi_min = 'f > 31 ГГц !'\r\n            self.phi_minr = round(self.phi_min, 2) if (type(self.phi_min)\r\n                                                       == float) else (\r\n                                                       self.phi_min)\r\n\r\n        def offaxis_gain(self):\r\n            if (2 <= self.f <= 31):\r\n                if (self.phi < self.phi_min):\r\n                    self.g = '\\u03C6 < \\u03C6_min !'\r\n                # внеосевой коэффициент усиления антенны, дБ\r\n                elif (self.phi > 180):\r\n                    self.g = '\\u03C6 > 180 !'\r\n                else:\r\n                    if (self.ab or self.dw > 100):\r\n                        if (self.phi_min <= self.phi < 48):\r\n                            self.g = 32 - 25 * log10(self.phi)\r\n                        else:\r\n                            self.g = -10\r\n                    else:\r\n                        if (self.phi_min <= self.phi < 48):\r\n                            self.g = 52 - 10 * (\r\n                                     log10(self.dw)) - (\r\n                                     25 * log10(self.phi))\r\n                        else:\r\n                            self.g = 10 - 10 * log10(self.dw)\r\n            elif (self.f < 2):\r\n                self.g = 'f < 2 ГГц !'\r\n            else:\r\n                self.g = 'f > 31 ГГц !'\r\n            super().offaxis_gain()\r\n\r\n\r\nclass S580(S465):\r\n    def input_widgets(self):\r\n        super().input_widgets()\r\n        self.root.label_tx_rx.destroy()\r\n        self.root.frame_tx_rx.destroy()\r\n\r\n    def get_inputs(self):\r\n        super(S465, self).get_inputs()\r\n        self.after_before = self.root.after_before.get()\r\n        self.inputs += [self.after_before]\r\n\r\n    class Equations(Rec.Equations):\r\n        def __init__(self, inputs):\r\n            self.inputs = inputs\r\n            self.ab = inputs[3]\r\n            # ab = True, если земная станция принадлежит сети,\r\n            # координируемой после 1993 г.\r\n            super().__init__(inputs)\r\n            self.outputs += [self.phi_minr]\r\n\r\n        def add_params(self):\r\n            super().add_params()\r\n            if self.dw >= 50:\r\n                # минимальный внеосевой угол, градусов\r\n                self.phi_min = max(1, 100 * self.w / self.d)\r\n            else:\r\n                self.phi_min = ''\r\n            self.phi_minr = round(self.phi_min, 2) if (type(self.phi_min)\r\n                                                       == float) else (\r\n                                                       self.phi_min)\r\n\r\n        def offaxis_gain(self):\r\n            if self.dw >= 50:\r\n                if self.phi < self.phi_min:\r\n                    self.g = AP7.Equations(self.inputs).g\r\n                # внеосевой коэффициент усиления антенны, дБ\r\n                elif (self.phi_min <= self.phi <= 20):\r\n                    self.g = 29 - 25 * log10(self.phi)\r\n                    # elif (20 < self.phi <= 26.3):\r\n                    # self.g = -3.5\r\n                else:\r\n                    self.g = S465.Equations(self.inputs + [True]).g\r\n            else:\r\n                self.g = 'D/\\u03BB < 50 !'\r\n            super().offaxis_gain()\r\n\r\n\r\nclass TestEquations:\r\n    def __init__(self):\r\n        self.AP30_97()\r\n        self.AP30B()\r\n        self.AP7()\r\n        self.AP8()\r\n        self.S465()\r\n        self.S580()\r\n\r\n    def AP30_97(self):\r\n        assert AP30_97.Equations([0, 12.1, 0.6, 0.65\r\n                                  ]).outputs == [35.75, 24.78, 24.22, 35.75,\r\n                                                 14.16, 3.84, 3.92, 22.91,\r\n                                                 10.75, 0.72, 1.26, 2.86, 4.57,\r\n                                                 10.96, -14.24]\r\n        assert AP30_97.Equations([0.3, 12.1, 0.6, 0.65\r\n                                  ]).outputs == [35.62, 24.78, 24.22, 35.75,\r\n                                                 14.16, 3.84, 3.92, 22.91,\r\n                                                 10.75, 0.72, 1.26, 2.86, 4.57,\r\n                                                 10.96, -14.24]\r\n        assert AP30_97.Equations([1, 12.1, 0.6, 0.65\r\n                                  ]).outputs == [34.29, 24.78, 24.22, 35.75,\r\n                                                 14.16, 3.84, 3.92, 22.91,\r\n                                                 14.95, 0.72, 1.26, 2.86, 4.57,\r\n                                                 10.96, -14.24]\r\n        assert AP30_97.Equations([2, 12.1, 0.6, 0.65\r\n                                  ]).outputs == [29.89, 24.78, 24.22, 35.75,\r\n                                                 14.16, 3.84, 3.92, 22.91,\r\n                                                 18.75, 0.72, 1.26, 2.86, 4.57,\r\n                                                 10.96, -14.24]\r\n        assert AP30_97.Equations([4, 12.1, 0.6, 0.65\r\n                                  ]).outputs == [13.95, 24.78, 24.22, 35.75,\r\n                                                 14.16, 3.84, 3.92, 22.91,\r\n                                                 9.24, 0.72, 1.26, 2.86, 4.57,\r\n                                                 10.96, -14.24]\r\n        assert AP30_97.Equations([8, 12.1, 0.6, 0.65\r\n                                  ]).outputs == [6.42, 24.78, 24.22, 35.75,\r\n                                                 14.16, 3.84, 3.92, 22.91,\r\n                                                 -1.58, 0.72, 1.26, 2.86, 4.57,\r\n                                                 10.96, -14.24]\r\n        assert AP30_97.Equations([50, 12.1, 0.6, 0.65\r\n                                  ]).outputs == [-5, 24.78, 24.22, 35.75,\r\n                                                 14.16, 3.84, 3.92, 22.91,\r\n                                                 -5, 0.72, 1.26, 2.86, 4.57,\r\n                                                 10.96, -14.24]\r\n        assert AP30_97.Equations([100, 12.1, 0.6, 0.65\r\n                                  ]).outputs == [0, 24.78, 24.22, 35.75,\r\n                                                 14.16, 3.84, 3.92, 22.91,\r\n                                                 0, 0.72, 1.26, 2.86, 4.57,\r\n                                                 10.96, -14.24]\r\n        assert AP30_97.Equations([200, 12.1, 0.6, 0.65\r\n                                  ]).outputs == ['\\u03C6 > 180 !', 24.78,\r\n                                                 24.22, 35.75, 14.16, 3.84,\r\n                                                 3.92, 22.91, '\\u03C6 > 180 !',\r\n                                                 0.72, 1.26, 2.86, 4.57, 10.96,\r\n                                                 -14.24]\r\n\r\n    def AP30B(self):\r\n        assert AP30B.Equations([0, 13, 2.7, 0.7\r\n                                ]).outputs == [49.76, 23.06, 117.08, 49.76,\r\n                                               30.03, 0.76]\r\n        assert AP30B.Equations([0.3, 13, 2.7, 0.7\r\n                                ]).outputs == [46.68, 23.06, 117.08, 49.76,\r\n                                               30.03, 0.76]\r\n        assert AP30B.Equations([0.8, 13, 2.7, 0.7\r\n                                ]).outputs == [30.03, 23.06, 117.08, 49.76,\r\n                                               30.03, 0.76]\r\n        assert AP30B.Equations([10, 13, 2.7, 0.7\r\n                                ]).outputs == [4.0, 23.06, 117.08, 49.76,\r\n                                               30.03, 0.76]\r\n        assert AP30B.Equations([20, 13, 2.7, 0.7\r\n                                ]).outputs == [-3.5, 23.06, 117.08, 49.76,\r\n                                               30.03, 0.76]\r\n        assert AP30B.Equations([40, 13, 2.7, 0.7\r\n                                ]).outputs == [-8.05, 23.06, 117.08, 49.76,\r\n                                               30.03, 0.76]\r\n        assert AP30B.Equations([100, 13, 2.7, 0.7\r\n                                ]).outputs == [-10, 23.06, 117.08, 49.76,\r\n                                               30.03, 0.76]\r\n        assert AP30B.Equations([200, 13, 2.7, 0.7\r\n                                ]).outputs == ['\\u03C6 > 180 !', 23.06, 117.08,\r\n                                               49.76, 30.03, 0.76]\r\n\r\n    def AP7(self):\r\n        assert AP7.Equations([0, 14, 0.6]).outputs == ['D/\\u03BB < 35 !',\r\n                                                       21.41, 28.02,\r\n                                                       'D/\\u03BB < 35 !',\r\n                                                       'D/\\u03BB < 35 !',\r\n                                                       'D/\\u03BB < 35 !',\r\n                                                       'D/\\u03BB < 35 !',\r\n                                                       'D/\\u03BB < 35 !']\r\n        assert AP7.Equations([0, 14, 3]).outputs == [50.63, 21.41, 140.1,\r\n                                                     50.63, 31.2, 0.63, 0.82,\r\n                                                     36]\r\n        assert AP7.Equations([0.3, 14, 3]).outputs == [46.21, 21.41, 140.1,\r\n                                                       50.63, 31.2, 0.63, 0.82,\r\n                                                       36]\r\n        assert AP7.Equations([0.7, 14, 3]).outputs == [31.2, 21.41, 140.1,\r\n                                                       50.63, 31.2, 0.63, 0.82,\r\n                                                       36]\r\n        assert AP7.Equations([20, 14, 3]).outputs == [-3.53, 21.41, 140.1,\r\n                                                      50.63, 31.2, 0.63, 0.82,\r\n                                                      36]\r\n        assert AP7.Equations([100, 14, 3]).outputs == [-10, 21.41, 140.1,\r\n                                                       50.63, 31.2, 0.63, 0.82,\r\n                                                       36]\r\n        assert AP7.Equations([200, 14, 3]).outputs == ['\\u03C6 > 180 !', 21.41,\r\n                                                       140.1, 50.63, 31.2,\r\n                                                       0.63, 0.82, 36]\r\n        assert AP7.Equations([0, 14, 1]).outputs == [41.09, 21.41, 46.7, 41.09,\r\n                                                     20.73, 1.93, 2.14, 36]\r\n        assert AP7.Equations([1, 14, 1]).outputs == [35.63, 21.41, 46.7, 41.09,\r\n                                                     20.73, 1.93, 2.14, 36]\r\n        assert AP7.Equations([2, 14, 1]).outputs == [20.73, 21.41, 46.7, 41.09,\r\n                                                     20.73, 1.93, 2.14, 36]\r\n        assert AP7.Equations([20, 14, 1]).outputs == [-3.53, 21.41, 46.7,\r\n                                                      41.09, 20.73, 1.93, 2.14,\r\n                                                      36]\r\n        assert AP7.Equations([100, 14, 1]).outputs == [-10, 21.41, 46.7, 41.09,\r\n                                                       20.73, 1.93, 2.14, 36]\r\n        assert AP7.Equations([200, 14, 1]).outputs == ['\\u03C6 > 180 !', 21.41,\r\n                                                       46.7, 41.09, 20.73,\r\n                                                       1.93, 2.14, 36]\r\n\r\n    def AP8(self):\r\n        assert AP8.Equations([0, 14, 3]).outputs == [50.63, 21.41, 140.1,\r\n                                                     50.63, 34.2, 0.58, 0.82,\r\n                                                     48]\r\n        assert AP8.Equations([0.3, 14, 3]).outputs == [46.21, 21.41, 140.1,\r\n                                                       50.63, 34.2, 0.58, 0.82,\r\n                                                       48]\r\n        assert AP8.Equations([0.7, 14, 3]).outputs == [34.2, 21.41, 140.1,\r\n                                                       50.63, 34.2, 0.58, 0.82,\r\n                                                       48]\r\n        assert AP8.Equations([20, 14, 3]).outputs == [-0.53, 21.41, 140.1,\r\n                                                      50.63, 34.2, 0.58, 0.82,\r\n                                                      48]\r\n        assert AP8.Equations([100, 14, 3]).outputs == [-10, 21.41, 140.1,\r\n                                                       50.63, 34.2, 0.58, 0.82,\r\n                                                       48]\r\n        assert AP8.Equations([200, 14, 3]).outputs == ['\\u03C6 > 180 !', 21.41,\r\n                                                       140.1, 50.63, 34.2,\r\n                                                       0.58, 0.82, 48]\r\n        assert AP8.Equations([0, 14, 1]).outputs == [41.09, 21.41, 46.7,\r\n                                                     41.09, 27.04, 1.61, 2.14,\r\n                                                     48]\r\n        assert AP8.Equations([0.8, 14, 1]).outputs == [37.6, 21.41, 46.7,\r\n                                                       41.09, 27.04, 1.61,\r\n                                                       2.14, 48]\r\n        assert AP8.Equations([2, 14, 1]).outputs == [27.04, 21.41, 46.7,\r\n                                                     41.09, 27.04, 1.61, 2.14,\r\n                                                     48]\r\n        assert AP8.Equations([20, 14, 1]).outputs == [2.78, 21.41, 46.7,\r\n                                                      41.09, 27.04, 1.61, 2.14,\r\n                                                      48]\r\n        assert AP8.Equations([100, 14, 1]).outputs == [-6.69, 21.41, 46.7,\r\n                                                       41.09, 27.04, 1.61,\r\n                                                       2.14, 48]\r\n        assert AP8.Equations([200, 14, 1]).outputs == ['\\u03C6 > 180 !',\r\n                                                       21.41, 46.7, 41.09,\r\n                                                       27.04, 1.61, 2.14, 48]\r\n\r\n    def S465(self):\r\n        assert S465.Equations([1, 14, 1, True, True\r\n                               ]).outputs == ['\\u03C6 < \\u03C6_min !',\r\n                                              21.41, 46.7, 2]\r\n        assert S465.Equations([3, 14, 1, True, True\r\n                               ]).outputs == [20.07, 21.41, 46.7, 2]\r\n        assert S465.Equations([49, 14, 1, True, True\r\n                               ]).outputs == [-10, 21.41, 46.7, 2]\r\n        assert S465.Equations([181, 14, 1, True, True\r\n                               ]).outputs == ['\\u03C6 > 180 !', 21.41, 46.7, 2]\r\n        assert S465.Equations([1, 14, 3, True, True\r\n                               ]).outputs == [32, 21.41, 140.1, 1]\r\n        assert S465.Equations([3, 14, 3, True, True\r\n                               ]).outputs == [20.07, 21.41, 140.1, 1]\r\n        assert S465.Equations([49, 14, 3, True, True\r\n                               ]).outputs == [-10, 21.41, 140.1, 1]\r\n        assert S465.Equations([181, 14, 3, True, True\r\n                               ]).outputs == ['\\u03C6 > 180 !',\r\n                                              21.41, 140.1, 1]\r\n\r\n        assert S465.Equations([1, 14, 1, False, True\r\n                               ]).outputs == ['\\u03C6 < \\u03C6_min !',\r\n                                              21.41, 46.7, 2.14]\r\n        assert S465.Equations([3, 14, 1, False, True\r\n                               ]).outputs == [23.38, 21.41, 46.7, 2.14]\r\n        assert S465.Equations([49, 14, 1, False, True\r\n                               ]).outputs == [-6.69, 21.41, 46.7, 2.14]\r\n        assert S465.Equations([181, 14, 1, False, True\r\n                               ]).outputs == ['\\u03C6 > 180 !', 21.41, 46.7,\r\n                                              2.14]\r\n        assert S465.Equations([1, 14, 3, False, True\r\n                               ]).outputs == [32, 21.41, 140.1, 1]\r\n        assert S465.Equations([3, 14, 3, False, True\r\n                               ]).outputs == [20.07, 21.41, 140.1, 1]\r\n        assert S465.Equations([49, 14, 3, False, True\r\n                               ]).outputs == [-10, 21.41, 140.1, 1]\r\n        assert S465.Equations([181, 14, 3, False, True\r\n                               ]).outputs == ['\\u03C6 > 180 !', 21.41, 140.1,\r\n                                              1]\r\n\r\n        assert S465.Equations([1, 3.4, 1, True, False\r\n                               ]).outputs == ['\\u03C6 < \\u03C6_min !', 88.17,\r\n                                              11.34, 2.5]\r\n        assert S465.Equations([3, 3.4, 1, True, False\r\n                               ]).outputs == [20.07, 88.17, 11.34, 2.5]\r\n        assert S465.Equations([49, 3.4, 1, True, False\r\n                               ]).outputs == [-10, 88.17, 11.34, 2.5]\r\n        assert S465.Equations([181, 3.4, 1, True, False\r\n                               ]).outputs == ['\\u03C6 > 180 !', 88.17, 11.34,\r\n                                              2.5]\r\n        assert S465.Equations([1, 3.4, 3, True, False\r\n                               ]).outputs == ['\\u03C6 < \\u03C6_min !', 88.17,\r\n                                              34.02, 2.44]\r\n        assert S465.Equations([3, 3.4, 3, True, False\r\n                               ]).outputs == [20.07, 88.17, 34.02, 2.44]\r\n        assert S465.Equations([49, 3.4, 3, True, False\r\n                               ]).outputs == [-10, 88.17, 34.02, 2.44]\r\n        assert S465.Equations([181, 3.4, 3, True, False\r\n                               ]).outputs == ['\\u03C6 > 180 !', 88.17, 34.02,\r\n                                              2.44]\r\n\r\n    def S580(self):\r\n        assert S580.Equations([1, 14, 1, True\r\n                               ]).outputs == ['D/\\u03BB < 50 !', 21.41, 46.7,\r\n                                              '']\r\n        assert S580.Equations([1, 14, 1.1, True\r\n                               ]).outputs == [35.32, 21.41, 51.37, 1.95]\r\n        assert S580.Equations([3, 14, 1.1, True\r\n                               ]).outputs == [17.07, 21.41, 51.37, 1.95]\r\n        assert S580.Equations([21, 14, 1.1, True\r\n                               ]).outputs == [-1.06, 21.41, 51.37, 1.95]\r\n        assert S580.Equations([27, 14, 1.1, True\r\n                               ]).outputs == [-3.78, 21.41, 51.37, 1.95]\r\n        assert S580.Equations([49, 14, 1.1, True\r\n                               ]).outputs == [-10, 21.41, 51.37, 1.95]\r\n        assert S580.Equations([181, 14, 1.1, True\r\n                               ]).outputs == ['\\u03C6 > 180 !', 21.41, 51.37,\r\n                                              1.95]\r\n\r\n\r\nTestEquations()\r\nRoot().mainloop()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- off-axis_gain.py	(revision e149bd1a2a55782715d8633461bf3b34007b31a3)
+++ off-axis_gain.py	(date 1588494622805)
@@ -1,14 +1,14 @@
 # -----------------------------------------------------------------------------
 # Name:        off-axis_gain
-# Purpose:
+# Purpose:     ASI calculation
 #
-# Author:      -
+# Author:      Amantay Ismanov
 #
 # Created:     15.04.2020
 # Copyright:   (c) - 2020
 # Licence:     <your licence>
 # -----------------------------------------------------------------------------
-from math import log10, sqrt, pi
+from math import log10, sqrt, pi, sin
 from tkinter import Tk, E, W, StringVar, IntVar, END
 from tkinter import ttk
 
@@ -348,20 +348,20 @@
         def offaxis_gain(self):
             if self.phi == 0:
                 self.g = self.gmax
-            elif (0 < self.phi < self.phi_m):
+            elif 0 < self.phi < self.phi_m:
                 self.g = self.gmax - 2.5 * 10**(-3) * (self.dw * self.phi)**2
-            elif (self.phi_m <= self.phi < self.phi_r):
+            elif self.phi_m <= self.phi < self.phi_r:
                 self.g = self.g1
-            elif (self.phi > 180):
+            elif self.phi > 180:
                 self.g = '\u03C6 > 180 !'
             else:
                 if self.dw >= 100:
-                    if (self.phi_r <= self.phi < self.phi_b):
+                    if self.phi_r <= self.phi < self.phi_b:
                         self.g = 32 - 25 * log10(self.phi)
                     else:
                         self.g = - 10
                 else:
-                    if (self.phi_r <= self.phi < self.phi_b):
+                    if self.phi_r <= self.phi < self.phi_b:
                         self.g = (52 - 10*log10(self.dw) - 25*log10(self.phi))
                     else:
                         self.g = 10 - 10 * log10(self.dw)
@@ -391,9 +391,9 @@
                 self.g = 'D/\u03BB < 35 !'
             else:
                 super().offaxis_gain()
-            if (self.phi_r <= self.phi < self.phi_b):
+            if self.phi_r <= self.phi < self.phi_b:
                 self.g = 29 - 25 * log10(self.phi)
-            elif (self.phi_b <= self.phi <= 180):
+            elif self.phi_b <= self.phi <= 180:
                 self.g = - 10
             super(AP8.Equations, self).offaxis_gain()
 
@@ -549,30 +549,30 @@
         def offaxis_gain(self):
             super().offaxis_gain()
             # Co-polar. off-axis gain
-            if (self.phi_r <= self.phi < self.phi_b):
+            if self.phi_r <= self.phi < self.phi_b:
                 self.g = 29 - 25 * log10(self.phi)
-            elif (self.phi_b <= self.phi < 70):
+            elif self.phi_b <= self.phi < 70:
                 self.g = - 5
-            elif (70 <= self.phi <= 180):
+            elif 70 <= self.phi <= 180:
                 self.g = 0
             super(AP8.Equations, self).offaxis_gain()
             # Cross-polar. off-axis gain
-            if (0 <= self.phi < self.z25phi_0):
+            if 0 <= self.phi < self.z25phi_0:
                 self.gx = self.gmax - 25
-            elif (self.z25phi_0 <= self.phi < self.z44phi_0):
+            elif self.z25phi_0 <= self.phi < self.z44phi_0:
                 self.gx = self.gmax - 25 + 8 * ((self.phi - self.z25phi_0)
                                                 / (0.19 * self.phi_0))
-            elif (self.z44phi_0 <= self.phi < self.phi_0):
+            elif self.z44phi_0 <= self.phi < self.phi_0:
                 self.gx = self.gmax - 17
-            elif (self.phi_0 <= self.phi < self.phi_1):
+            elif self.phi_0 <= self.phi < self.phi_1:
                 self.gx = self.gmax - 17 + self.c * ((self.phi - self.phi_0)
                                                      / (self.phi_1
-                                                     - self.phi_0))
-            elif (self.phi_1 <= self.phi < self.phi_2):
+                                                        - self.phi_0))
+            elif self.phi_1 <= self.phi < self.phi_2:
                 self.gx = 21 - 25 * log10(self.phi)
-            elif (self.phi_2 <= self.phi < 70):
+            elif self.phi_2 <= self.phi < 70:
                 self.gx = - 5
-            elif (70 <= self.phi <= 180):
+            elif 70 <= self.phi <= 180:
                 self.gx = 0
             else:
                 self.gx = '\u03C6 > 180 !'
@@ -614,9 +614,9 @@
 
         def offaxis_gain(self):
             super().offaxis_gain()
-            if (self.phi_m <= self.phi <= 19.95):
+            if self.phi_m <= self.phi <= 19.95:
                 self.g = min(self.g1, 29 - 25 * log10(self.phi))
-            elif (19.95 < self.phi <= 180):
+            elif 19.95 < self.phi <= 180:
                 self.g = max(min(- 3.5, 32 - 25 * log10(self.phi)), -10)
             self.gr = round(self.g, 2) if type(self.g) == float else self.g
 
@@ -700,7 +700,7 @@
         def add_params(self):
             super().add_params()
 
-            if (2 <= self.f <= 31):
+            if 2 <= self.f <= 31:
                 if (self.ab or self.dw > 100):
                     if (self.tr or self.dw >= 33.3):
                         if self.dw >= 50:
@@ -712,35 +712,35 @@
                         self.phi_min = 2.5
                 else:
                     self.phi_min = 100 * self.w / self.d
-            elif (self.f < 2):
+            elif self.f < 2:
                 self.phi_min = 'f < 2 ГГц !'
             else:
                 self.phi_min = 'f > 31 ГГц !'
             self.phi_minr = round(self.phi_min, 2) if (type(self.phi_min)
                                                        == float) else (
-                                                       self.phi_min)
+                                                           self.phi_min)
 
         def offaxis_gain(self):
-            if (2 <= self.f <= 31):
-                if (self.phi < self.phi_min):
+            if 2 <= self.f <= 31:
+                if self.phi < self.phi_min:
                     self.g = '\u03C6 < \u03C6_min !'
                 # внеосевой коэффициент усиления антенны, дБ
-                elif (self.phi > 180):
+                elif self.phi > 180:
                     self.g = '\u03C6 > 180 !'
                 else:
                     if (self.ab or self.dw > 100):
-                        if (self.phi_min <= self.phi < 48):
+                        if self.phi_min <= self.phi < 48:
                             self.g = 32 - 25 * log10(self.phi)
                         else:
                             self.g = -10
                     else:
-                        if (self.phi_min <= self.phi < 48):
+                        if self.phi_min <= self.phi < 48:
                             self.g = 52 - 10 * (
-                                     log10(self.dw)) - (
-                                     25 * log10(self.phi))
+                                log10(self.dw)) - (
+                                    25 * log10(self.phi))
                         else:
                             self.g = 10 - 10 * log10(self.dw)
-            elif (self.f < 2):
+            elif self.f < 2:
                 self.g = 'f < 2 ГГц !'
             else:
                 self.g = 'f > 31 ГГц !'
@@ -776,14 +776,14 @@
                 self.phi_min = ''
             self.phi_minr = round(self.phi_min, 2) if (type(self.phi_min)
                                                        == float) else (
-                                                       self.phi_min)
+                                                           self.phi_min)
 
         def offaxis_gain(self):
             if self.dw >= 50:
                 if self.phi < self.phi_min:
                     self.g = AP7.Equations(self.inputs).g
                 # внеосевой коэффициент усиления антенны, дБ
-                elif (self.phi_min <= self.phi <= 20):
+                elif self.phi_min <= self.phi <= 20:
                     self.g = 29 - 25 * log10(self.phi)
                     # elif (20 < self.phi <= 26.3):
                     # self.g = -3.5
Index: .idea/asi.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/asi.iml	(date 1588434536787)
+++ .idea/asi.iml	(date 1588434536787)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="jdk" jdkName="Python 3.8" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/codeStyles/codeStyleConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/codeStyles/codeStyleConfig.xml	(date 1588438155082)
+++ .idea/codeStyles/codeStyleConfig.xml	(date 1588438155082)
@@ -0,0 +1,5 @@
+<component name="ProjectCodeStyleConfiguration">
+  <state>
+    <option name="PREFERRED_PROJECT_CODE_STYLE" value="Default" />
+  </state>
+</component>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1588434336898)
+++ .idea/vcs.xml	(date 1588434336898)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(date 1588434336908)
+++ .idea/modules.xml	(date 1588434336908)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/asi.iml" filepath="$PROJECT_DIR$/.idea/asi.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/inspectionProfiles/profiles_settings.xml	(date 1588489771016)
+++ .idea/inspectionProfiles/profiles_settings.xml	(date 1588489771016)
@@ -0,0 +1,7 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="PROJECT_PROFILE" value="Default" />
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
